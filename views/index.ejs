<!DOCTYPE html>
<html lang="ja">

<head>
  <meta charset="utf-8" />
  <!-- レスポンシブ対応 -->
  <meta name="viewport"
    content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no" />
  <!-- jQuery -->
  <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
  <link rel="stylesheet" type="text/css" href="stylesheets/style.css" />
  <title>オモチャンボタン</title>
</head>

<body>
  <!-- モーダルウィンドウ -->
  <div id="confirmationModal" class="modal">
    <div class="modal-content">
      <button id="confirmYes">音声の読み込みを開始</button>

    </div>
  </div>

  <h1>オモチャンボタン</h1>
  <p>※音量注意※</p>

  <!-- スクリプトセクション -->
  <script>

    // モーダル表示
    function showModal() {
      $('#confirmationModal').show();
    }

    // モーダル非表示
    function hideModal() {
      $('#confirmationModal').hide();
    }

    // 確認ダイアログを表示する関数
    async function showConfirmationDialog() {
      return new Promise((resolve) => {
        showModal();

        // はいボタンがクリックされたらresolve
        $('#confirmYes').on('click', function () {
          hideModal();
          resolve();
        });

        // いいえボタンがクリックされたらresolve
        $('#confirmNo').on('click', function () {
          hideModal();
          // キャンセルされた場合はrejectなども可能
          resolve();
        });
      });
    }

    // 指定時間待機する関数
    async function sleep(ms) {
      return new Promise((resolve) => setTimeout(resolve, ms));
    }

    // 音声データを一括でプリロードする関数
    async function preloadAllAudio(clips) {
      // プログレスバーの作成と追加
      const progressContainer = document.createElement("div");
      progressContainer.className = "progress-container";
      document.body.appendChild(progressContainer);

      const progressBar = document.createElement("div");
      progressBar.className = "progress-bar";
      progressContainer.appendChild(progressBar);

      // Promiseの配列を作成
      const promises = clips.map(async (clip, index) => {
        // ファイルの取得
        const response = await fetch(clip.filepath);

        // レスポンスが正常でない場合はエラーをスロー
        if (!response.ok) {
          throw new Error(
            `Failed to fetch: ${response.status} ${response.statusText}`
          );
        }

        // 音声データの取得とデコード
        const arrayBuffer = await response.arrayBuffer();
        const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);

        // 進捗のリアルタイム表示
        const progress = (index + 1) / clips.length * 100;
        progressBar.style.width = `${progress}%`;


        // 取得した音声データを返す
        return audioBuffer;
      });


      // すべての音声データを一括でプリロード
      const audioBuffers = await Promise.all(promises);

      // プログレスバーの進捗を100%に更新
      // progressBar.style.width = "100%";

      // プログレスバーの削除
      // progressContainer.remove();

      return audioBuffers;
    }


    // 音声再生
    function playAudio(audioBuffer) {
      const source = audioContext.createBufferSource();
      source.buffer = audioBuffer;
      source.connect(audioContext.destination);
      source.start(0);
    }

    // 初期化関数
    async function initialize() {
      try {
        // ダブルタップでの画面拡大を無効にする
        document.addEventListener("dblclick", function (e) {
          e.preventDefault();
        }, { passive: false });
        // ユーザーの確認を得る
        await showConfirmationDialog();

        // Web Audio APIコンテキストの作成
        audioContext = new (window.AudioContext || window.webkitAudioContext)();

        // ブラウザの再生状態を確認
        if (audioContext.state === "suspended") {
          // AudioContextが一時停止状態の場合、ユーザージェスチャー後に再開
          document.addEventListener(
            "click",
            function () {
              audioContext.resume().then(() => {
                console.log("AudioContext resumed successfully");
              });
            },
            { once: true }
          );
        }

        // JSONから音声情報を取得
        const clips = JSON.parse('<%- clips %>');

        // 全ての音声データを一括でプリロード
        const audioBuffers = await preloadAllAudio(clips);

        // ボタンの作成とクリック時の処理を設定
        clips.forEach((clip, index) => {
          const button = document.createElement("button");
          button.type = "button";
          button.textContent = clip.title;
          button.onclick = () => playAudio(audioBuffers[index]);
          document.body.appendChild(button);
        });
      } catch (error) {
        // エラーが発生した場合はコンソールに出力
        console.error(error);
      }
    }

    // ページが読み込まれた時に初期化関数を実行
    document.addEventListener("DOMContentLoaded", initialize);

  </script>
</body>

</html>
