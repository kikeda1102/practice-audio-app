<!DOCTYPE html>
<html lang="ja">

<head>
  <meta charset="utf-8" />
  <!-- レスポンシブ対応、スマホ対応 -->
  <meta name="viewport"
    content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no" />
  <link rel="stylesheet" type="text/css" href="stylesheets/style.css" />
  <title>オモチャンボタン</title>
</head>

<body>

  <!-- モーダルウィンドウ -->
  <div id="loadModal" class="modal">
    <div class="modal-content">
      <button id="startLoading">音声の読み込みを開始</button>
    </div>
  </div>

  <h1>オモチャンボタン</h1>
  <p>※音量注意※</p>

  <!-- スクリプトセクション -->
  <script type="text/javascript">

    // 確認ダイアログを表示する関数
    async function showLoadModal(clips) {
      return new Promise(async (resolve) => {

        // モーダルを表示
        document.getElementById('loadModal').style.display = 'block';

        // プログレスバーの作成と追加
        const progressContainer = document.createElement("div");
        progressContainer.className = "progress-container";
        document.querySelector('.modal-content').appendChild(progressContainer);

        const progressBar = document.createElement("div");
        progressBar.className = "progress-bar";
        progressContainer.appendChild(progressBar);

        // ボタンがクリックされたらプリロード開始
        document.getElementById('startLoading').addEventListener('click', async function () {
          this.classList.add('clicked');
          try {

            // Web Audio APIコンテキストの作成
            audioContext = new (window.AudioContext || window.webkitAudioContext)();

            // preload
            const audioBuffers = await preloadAllAudio(clips, progressBar);

            // ブラウザの再生状態を確認
            if (audioContext.state === "suspended") {
              // AudioContextが一時停止状態の場合、ユーザージェスチャー後に再開
              document.addEventListener(
                "click",
                function () {
                  audioContext.resume().then(() => {
                    console.log("AudioContext resumed successfully");
                  });
                },
                { once: true }
              );
            }

            // ボタンの作成とクリック時の処理を設定
            clips.forEach((clip, index) => {
              const button = document.createElement("button");
              button.type = "button";
              button.textContent = clip.title;
              button.onclick = () => playAudio(audioBuffers[index]);
              document.body.appendChild(button);
            });

            // プリロードが完了したら Modal を閉じる
            document.getElementById('loadModal').style.display = 'none';

            resolve(audioBuffers);
          } catch (error) {
            // エラーが発生した場合の処理
            console.error(error);
          }
        });
      });
    }

    // 指定時間待機する関数
    async function sleep(ms) {
      return new Promise((resolve) => setTimeout(resolve, ms));
    }

    // 音声データを一括でプリロードする関数
    async function preloadAllAudio(clips, progressBar) {
      return new Promise(async (resolve) => {
        // Promiseの配列を作成
        const promises = clips.map(async (clip, index) => {

          // ファイルの取得
          const response = await fetch(clip.filepath);

          // レスポンスが正常でない場合はエラーをスロー
          if (!response.ok) {
            throw new Error(
              `Failed to fetch: ${response.status} ${response.statusText}`
            );
          }

          // 音声データの取得とデコード
          const arrayBuffer = await response.arrayBuffer();
          const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);

          // 進捗のリアルタイム表示
          const progress = (index + 1) / clips.length * 100;
          progressBar.style.width = `${progress}%`;

          // 1000ms待機
          await sleep(1000);


          // 取得した音声データを返す
          return audioBuffer;
        });


        // すべての音声データを一括でプリロード
        const audioBuffers = await Promise.all(promises);

        // プログレスバーの進捗を100%に更新
        progressBar.style.width = "100%";

        // プログレスバーの削除
        // progressContainer.remove();

        resolve(audioBuffers);
      }
      );
    }


    // 音声再生
    function playAudio(audioBuffer) {
      const source = audioContext.createBufferSource();
      source.buffer = audioBuffer;
      source.connect(audioContext.destination);
      source.start(0);
    }

    // 初期化関数
    async function initialize() {
      try {
        // ダブルタップでの画面拡大を無効にする
        document.addEventListener("dblclick", function (e) {
          e.preventDefault();
        }, { passive: false });

        // JSONから音声情報を取得
        const clips = JSON.parse('<%- clips %>');


        // モーダルウィンドウを表示 userGestureを得るため
        await showLoadModal(clips);

      } catch (error) {
        // エラーが発生した場合はコンソールに出力
        console.error(error);
      }
    }

    // ページが読み込まれた時に初期化関数を実行
    document.addEventListener("DOMContentLoaded", initialize);

  </script>
</body>

</html>
